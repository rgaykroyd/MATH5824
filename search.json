[
  {
    "objectID": "1_nonlinear.html#overview",
    "href": "1_nonlinear.html#overview",
    "title": "1  Introduction to Non-linear Modelling",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nTable 1.1 reports on the depth of a coal seam determined by drilling bore holes at regular intervals along a line. The depth \\(y\\) at location \\(t=6\\) is missing: could we estimate it?\n\n\nTable 1.1: Coal-seam depths (in metres) below the land surface at intervals of 1 km along a linear transect.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLocation, \\(t\\)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nDepth, \\(y\\)\n-90\n-95\n-140\n-120\n-100\n-75\nNA\n-130\n-110\n-105\n-50\n\n\n\n\nFigure Figure 1.1 plots these data, superimposed with predictions from several polynomial regression models.\n\n\nCode\npar(mar=c(3,3,1,1), mgp=c(2,1,0))\n\nlocation=0:10\ndepth=c(-90,-95,-140,-120,-100,-75,NA,-130,-110,-105,-50)\n\nplot(location, depth, ylim=c(-150,0), pch=16)\nabline(h=0, lty=2)\nfit0 = mean(depth, na.rm = T)\nabline(h=fit0)\n\nplot(location, depth, ylim=c(-150,0), pch=16)\nabline(h=0, lty=2)\nfit1 = lm(depth ~ location)\nabline(fit1)\n\nplot(location, depth, ylim=c(-150,0), pch=16)\nabline(h=0, lty=2)\nlocation.sq = location^2\nfit2 = lm(depth ~ location + location.sq)\nfitted2 = predict(fit2, \n    new=data.frame(location=seq(0,10,0.5),location.sq=seq(0,10,0.5)^2))\nlines(seq(0,10,0.5), fitted2)\n\nplot(location, depth, ylim=c(-150,0), pch=16)\nabline(h=0, lty=2)\nlocation.cubic = location^3\nfit3 = lm(depth ~ location + location.sq + location.cubic)\nfitted3 = predict(fit3, \n    new=data.frame(location=seq(0,10,0.5),\n                   location.sq=seq(0,10,0.5)^2,\n                   location.cubic=seq(0,10,0.5)^3))\nlines(seq(0,10,0.5), fitted3)\n\n\n\n\n\n\n\n\n(a) Constant model\n\n\n\n\n\n\n\n(b) Linear model\n\n\n\n\n\n\n\n\n\n(c) Quadratic model\n\n\n\n\n\n\n\n(d) Cubic model\n\n\n\n\nFigure 1.1: The coal-seam data superimposed with predictions from polynomial regression models.\n\n\n\nEach of these models would predict a different value for the missing observation \\(y_6\\). We do not know the accuracy of the depth measurements, so in principle any of these curves could be correct. Clearly, the residual variance is largest for the constant-depth model in Figure 1.1 (a), and smallest for the cubic polynomial in Figure 1.1 (c). However, none of these models produces a convincingly good fit. Moreover, these models are not particularly believable, since we know that geological pressures exerted over very long periods of time cause the landscape and its underlying layers of rock to undulate and fracture. This suggests we need a different strategy.\nNext, consider the simulated example in Figure 1.2. At first look we might be happy with the fitted curves in Figure 1.2 (a) or Figure 1.2 (b). The data, however, are created with a change-point at \\(x=0.67\\) where the relationship changes from linear with slope \\(0.6\\) to a constant value of \\(0.75\\). This description is completely lost with these two models.\n\n\nCode\npar(mar=c(3,3,1,1), mgp=c(2,1,0))\n\nset.seed(12341)\n\nx = runif(40)\ny = 0.75*(x >= 0.67) + 0.6*x*(x<0.67) + rnorm(40,0,0.1)\n\nplot(x,y, xlim=c(0,1), ylim=c(0,1), pch=16)\nfit = lm(y ~ x)\nfitted = predict(fit, new=data.frame(x=seq(0,1,0.1)))\nlines(seq(0,1,0.1), fitted)\n\nplot(x,y, xlim=c(0,1), ylim=c(0,1), pch=16)\nx2 = x^2\nfit = lm(y ~ x + x2)\nfitted = predict(fit, new=data.frame(x=seq(0,1,0.1),x2=seq(0,1,0.1)^2))\nlines(seq(0,1,0.1), fitted)\n\nplot(x,y, xlim=c(0,1), ylim=c(0,1), pch=16)\nfit = lm(y ~ x, weights = as.numeric(x<0.67))\nfitted = predict(fit, new=data.frame(x=seq(0,0.67,0.01)))\nlines(seq(0,0.67,0.01), fitted)\n\nfit = lm(y ~ x, weights = as.numeric(x>=0.67))\nfitted = predict(fit, new=data.frame(x=seq(0.67,1,0.01)))\nlines(seq(0.67,1,0.01), fitted); abline(v=0.67,lty=2)\n\nplot(x,y, xlim=c(0,1), ylim=c(0,1), pch=16)\nfit4 = smooth.spline(x, y, df=6)\nfit.locations = seq(0,1,0.01)\nfitted4 = predict(fit4, fit.locations)\nlines(fitted4)\n\n\n\n\n\n\n\n\n(a) Linear model\n\n\n\n\n\n\n\n(b) Quadratic model\n\n\n\n\n\n\n\n\n\n(c) Piecewise linear model\n\n\n\n\n\n\n\n(d) Cubic smoothing spline\n\n\n\n\nFigure 1.2: Simulated data superimposed with predictions from various models.\n\n\n\nFigure 1.2 (c) shows the result of fitting one linear function to the data below \\(0.67\\) and a second linear function above. Clearly, this fits well but it has assumed that the change-point location is known – which is unrealistic. Finally, Figure 1.2 (d) shows a fitted cubic smoothing spline to the data – we will studies these models later. This shows an excellent fit and leads to appropriate conclusions. That is, the relationship is approximately linear for small values, then there is a rapid increase, and finally a near constant value for high values. Of course, this is not exactly as the true relationship with a discontinuity at \\(x=0.67\\) but it would definitely suggest something extreme occurs between about \\(0.6\\) to \\(0.7\\). Full details will follow later, but the cubic spline fits local cubic polynomials which are constrained to create a continuous curve.\nNow returning to the coal seam data. Figure 1.3 shows the data again, superimposed with predictions from methods which are not constrained to produce such smooth curves.\n\n\nCode\npar(mar=c(3,3,1,1), mgp=c(2,1,0))\n\nlocation=0:10\ndepth=c(-90,-95,-140,-120,-100,-75,NA,-130,-110,-105,-50)\n\nplot(location, depth, ylim=c(-150,0), pch=16); abline(h=0, lty=2)\nfit1 = approxfun(location, depth, method=\"constant\")\ncurve(fit1,0,10, add=T)\n\nplot(location, depth, ylim=c(-150,0), pch=16); abline(h=0, lty=2)\nfit2 = approxfun(location, depth, method=\"linear\")\ncurve(fit2,0,10, add=T)\n\nplot(location, depth, ylim=c(-150,0), pch=16); abline(h=0, lty=2)\nfit3 = splinefun(location, depth)\ncurve(fit3,0,10, add=T)\n\nplot(location, depth, ylim=c(-150,0), pch=16); abline(h=0, lty=2)\nfit4 = smooth.spline(location[-7], depth[-7], df=7)\nfit.locations = seq(0,10,0.5)\nfitted4 = predict(fit4, fit.locations)\nlines(fitted4)\n\n\n\n\n\n\n\n\n(a) Constant interpolating spline\n\n\n\n\n\n\n\n(b) Linear interpolating spline\n\n\n\n\n\n\n\n\n\n(c) Cubic interpolating spline\n\n\n\n\n\n\n\n(d) Cubic smoothing spline\n\n\n\n\nFigure 1.3: The coal-seam data superimposed with predictions from various spline models.\n\n\n\nThe simplest method, constant-spline interpolation, assumes that the dependent variable remains constant between successive observations, with the result shown in Figure 1.3 (a). However, the discontinuities in this model make it quite unreliable. A better method, whose results are shown in Figure 1.3 (b), is linear-spline interpolation, which fits a straight line between successive observations. Even so, this method produces discontinuities in the gradient at each data point. A better method still, shown in Figure 1.3 (c), is cubic spline interpolation, which fits a cubic polynomial between successive data points such that both the gradient and the curvature at each data point is continuous.\nA feature of all these interpolation methods is that they fit the data exactly. Is this a good thing? The final method assumes that there may be some measurement error in the observations, which justifies fitting a smoother cubic spline than the cubic interpolating spline, but as we see in Figure 1.3 (d) which does not reproduce the data points exactly. Is this a bad thing? We will see during this module how to construct and evaluate these curves. Here, the results are presented only for motivation."
  },
  {
    "objectID": "2_interpolating.html#overview",
    "href": "2_interpolating.html#overview",
    "title": "2  Interpolating Splines",
    "section": "2.1 Overview",
    "text": "2.1 Overview"
  },
  {
    "objectID": "3_smoothing.html#overview",
    "href": "3_smoothing.html#overview",
    "title": "3  Smoothing Splines",
    "section": "3.1 Overview",
    "text": "3.1 Overview"
  },
  {
    "objectID": "4_technicaldetail.html#overview",
    "href": "4_technicaldetail.html#overview",
    "title": "4  Technical Details",
    "section": "4.1 Overview",
    "text": "4.1 Overview"
  },
  {
    "objectID": "5_summary.html",
    "href": "5_summary.html",
    "title": "5  Summary",
    "section": "",
    "text": "\\[\n\\def\\b#1{\\mathbf{#1}}\n\\]"
  },
  {
    "objectID": "6_references.html",
    "href": "6_references.html",
    "title": "6  References",
    "section": "",
    "text": "\\[\n\\def\\b#1{\\mathbf{#1}}\n\\]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MATH5824 Generalized Linear and Additive Models",
    "section": "",
    "text": "\\[\n\\def\\b#1{\\mathbf{#1}}\n\\]\n\n\nWeekly schedule\n\n\n\n\n\n\nImportant\n\n\n\nOur regular class times are:\n           Tuesday 11-12, Roger Stevens, LT25 (with MATH3823)\n           Thursday 2-3, Roger Stevens, LT23 (with MATH3823)\n           Friday 13-14, Roger Stevens, LT22 (MATH5824 only)\n\n\n\n\n\n\n\n\nWeek 1 (30 January - 3 February)\n\n\n\n\nBefore next Lecture: Please read MATH3823 Preface.\nLecture on Tuesday: We will briefly cover all material in MATH3823 Chapter 1: Introduction.\nBefore next Lecture: Please re-read MATH3823 Chapter 1 carefully.\nLecture on Thursday: Start MATH3823 Chapter 1: Essentials of Normal Linear Models.\n\nBefore next Lecture: Please read MATH5824 Preface.\nLecture on Friday: Start MATH5824 Chapter 1: Introduction to Non-linear Modelling by briefly considering 1.1 Overview.\n\nWeekly feedback: Self-study the Exercises in MATH3823 Section 1.5 – solutions to be posted during Week 1.\n\n\n\n\n\n\n\n\n\nWeek 2 (6 - 10 February)\n\n\n\n\nDetails will be added during Week 1.\n\n\n\n\n\n\n\n\n\nCoursework Practical Sessions (20 - 24 March)\n\n\n\n\nDetails to follow in early March."
  },
  {
    "objectID": "0_preface.html",
    "href": "0_preface.html",
    "title": "Preface",
    "section": "",
    "text": "These lecture notes are produced for the University of Leeds module “MATH5824 - Generalized Linear and Additive Models” for the academic year 2022-23. They are based on those used previously for this module and I am grateful to previous module lecturers for their considerable effort: Lanpeng Ji, Amanda Minter, John Kent, Wally Gilks, and Stuart Barber. This is the first year, however, that they have been produced in accessible format and hence some errors might occur during this conversion process. For information, I am using Quarto (a successor to RMarkdown) from RStudio to produce both the html and PDF, and then GitHub to create the website which can be accessed at rgaykroyd.github.io/MATH3823/. Please note that the PDF versions will only be made available on the University of Leeds Minerva system. Although I am a long-term user of RStudio, I have not previously used Quarto/RMarkdown nor Github and hence please be patient if there are hitches along the way.\nIn the Level 3 component of this module, we extend the simple linear regression model to the generalized linear model which can cope with non-normally distributed response variables, in particular data following binomial and Poisson distributions. However, we still just use linear functions of the predictor variables. A further extension of the linear model is the generalized additive model. Here, we no longer insist on the predictor variables affecting the response via a linear function of the predictors, but allow the response to depend on a more general smooth function of the predictor. In the Level 5 component of this module, we study splines and their use in interpolating and smoothing the effects of explanatory variables in the generalized linear models of the Level 3 component of this module (see separate Lecture Notes accompanying MATH3823).\nRG Aykroyd, Leeds, November 22, 2022"
  }
]